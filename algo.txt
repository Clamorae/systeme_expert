Proposition -> Liste de caratère
Premisse -> Liste de Proposition
Règle -> Produit cartésien d'une Premisse et d'une Proposition nomée définition
BaseDeConnaissance -> Liste de Règle
BaseDeFaits -> Liste de Proposition

Fonction createRule(): Règle
Début:
  createRule <- nouveau(Règle)
Fin.

Fonction addProp(rule:<Règle>,str:<Proposition>)
Début:
    rulePremisse <- Premisse(rule)
    TANT QUE (estPasVide(suivant(rulePremisse))
        rulePremisse <- suivant(rulePremisse)
    FIN TANT QUE
    suivant(rulePremisse) <- str
Fin.

Fonction createConclusion(rule:<Règle>)
Début:
  conclusion(rule) <- nouveau(Proposition)
Fin.

Fonction testProp(rulePrem:<Premisse>, prop:<Proposition>):Booléen
Début:
    SI estVide(rulePrem) ALORS
        testProp <- faux
    SINON:
        SI rulePrem = prop:ALORS
            testProp <- vrai
        SINON:
            testProp <- testProp(suivant(rulePrem),prop)
        FIN SI.
    FIN SI.
Fin.

Fonction deleteProp(rulePrem:<Premisse>,prop:<Proposition>)<Premisse>
DEBUT
    p<Premisse>
    teteListe<Premisse>
    teteListe=rulePrem
    SI estVide(rulePrem) ALORS
        deleteProp<-NULL
    SINON
        SI rulePrem=prop ALORS
            p=suivant(ruleprem)
            free(ruleprem)
            deleteprop<-p
        FIN SI
    FIN SI
    SI suivant(rulePrem)=prop ALORS
        p=suivant(ruleprem)
        suivant(ruleprem)=suivant(suivant(ruleprem))
        free(p)
        deleteProp<-save
    SINON
        ruleprem=suivant(ruleprem)
    FIN SI
    TANT QUE !estVide(rulePrem) ALORS
        SI suivant(rulePrem)=prop ALORS
            p=suivant(ruleprem)
            suivant(ruleprem)=suivant(suivant(ruleprem))
            free(p)
            deleteProp<-save
        SINON
            ruleprem=suivant(ruleprem)
        FIN SI
    FIN TANT QUE
FIN

////////////part2

Fonction isPremisseEmpty(rule:<Règle>): Booléen
Début:
    SI estVide(premisse(rule)):ALORS
        isPremisseEmpty <- vrai
    SINON:
        isPremisseEmpty <- faux
    FIN SI.
Fin.

Fonction premisseHead(rule:<Règle>):Premisse
DEBUT
    premisseHead premisse(rule)
FIN

Fonction premisseHead(rule:<Règle>):Proposition
DEBUT
    premisseHead premisse(conclusion)
FIN

Objectif: Supprimer une règle dans une base de connaissance
Lexique:
  BC: La base de connaissance
  ToDelete: l'élément de la liste à supprimer
  ToConnecter: l'élément de la liste à connecter au reste de la liste
  i: le numéro de la règle a supprimer
  j: une variable d'incrémentation

Fonction deleteRule(BC:<BaseDeConnaissance>,i:<Entier>):Entier
DEBUT
    Si Règle(BC) = INDEFINI Alors: // Cas ou la BC est nulle
      deleteRule <- -1
    FinSi
    j <- 1
    toDelete = BC
    toConnect = BC
    Tant que j != i faire:
      Si next(toDelete) = INDEFINI alors://Cas ou l'index i est trop grand
        deleteRule <- -1
      Sinon:
        toConnect <- toDelete
        toDelete <- next(toDelete)
      FinSi
      j <- j+1
    FinTantQue
    Si toDelete==toConnect alors: //cas ou le premier élément de la liste est suprimer
      BC <- next(BC)
    Sinon Si next(toDelete) != INDEFINI alors://Cas en millieu de liste
      toConnect <- next(next(toConnect));
    Sinon://Cas en fin de liste
      next(toConnect) <- INDEFINI
    FinSi
    suppr(toDelete)
FIN
